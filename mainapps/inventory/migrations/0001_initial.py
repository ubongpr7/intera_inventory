# Generated by Django 5.2.2 on 2025-06-07 21:04

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('company', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='InventoryCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the model instance.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(blank=True, help_text='User who created this model instance.', max_length=400, null=True, verbose_name='Created By')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this model instance was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this model instance was last updated.', verbose_name='Updated At')),
                ('profile', models.CharField(help_text='Profile of the user or entity associated with this model.', max_length=400, verbose_name='Profile')),
                ('structural', models.BooleanField(default=False, help_text='Inventory may not be directly assigned to a structural category, but may be assigned to child categories.', verbose_name='Structural')),
                ('name', models.CharField(help_text='It must be unique', max_length=200, unique=True, verbose_name='Category name*')),
                ('slug', models.SlugField(editable=False, max_length=230)),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'verbose_name_plural': 'categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='InventoryTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the model instance.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(blank=True, help_text='User who created this model instance.', max_length=400, null=True, verbose_name='Created By')),
                ('profile', models.CharField(help_text='Profile of the user or entity associated with this model.', max_length=400, verbose_name='Profile')),
                ('quantity', models.IntegerField(help_text='Positive for additions, negative for deductions')),
                ('unit_price', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=15, null=True)),
                ('transaction_type', models.CharField(choices=[('PO_RECEIVE', 'Purchase Order Receipt'), ('PO_COMPLETE', 'Purchase Order Completion'), ('ADJUSTMENT', 'Inventory Adjustment'), ('SALE', 'Customer Sale'), ('RETURN', 'Inventory Return'), ('LOSS', 'Inventory Loss')], default='PO_COMPLETE', max_length=20)),
                ('reference', models.CharField(help_text='Associated document number (PO, SO, etc)', max_length=64)),
                ('user', models.CharField(blank=True, help_text='User who performed the transaction', max_length=100, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional transaction details')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Inventory Transaction',
                'verbose_name_plural': 'Inventory Transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the model instance.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(blank=True, help_text='User who created this model instance.', max_length=400, null=True, verbose_name='Created By')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this model instance was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this model instance was last updated.', verbose_name='Updated At')),
                ('profile', models.CharField(help_text='Profile of the user or entity associated with this model.', max_length=400, verbose_name='Profile')),
                ('minimum_stock_level', models.IntegerField(default=0, help_text='Trigger point for low stock alerts (units)', verbose_name='Minimum Stock Level')),
                ('re_order_point', models.IntegerField(default=10, help_text='Inventory level triggering replenishment (units)', verbose_name='Reorder Point')),
                ('re_order_quantity', models.IntegerField(default=200, help_text='Standard quantity for automated replenishment', verbose_name='Reorder Quantity')),
                ('automate_reorder', models.BooleanField(default=False, help_text='Enable automatic purchase orders at reorder point', verbose_name='Auto-Replenish')),
                ('safety_stock_level', models.IntegerField(default=0, help_text='Buffer stock for demand/supply fluctuations', verbose_name='Safety Stock')),
                ('supplier_lead_time', models.IntegerField(default=0, help_text='Average replenishment duration (days)', verbose_name='Supplier Lead Time')),
                ('internal_processing_time', models.IntegerField(default=1, help_text='Days needed for internal order processing', verbose_name='Internal Processing Time')),
                ('reorder_strategy', models.CharField(choices=[('FQ', 'Fixed Quantity'), ('FI', 'Fixed Interval'), ('DY', 'Demand-Based')], default='FQ', help_text='Methodology for inventory replenishment', max_length=2, verbose_name='Replenishment Strategy')),
                ('expiration_threshold', models.IntegerField(default=30, help_text='Days before expiry to trigger alerts', verbose_name='Expiration Alert Window')),
                ('batch_tracking_enabled', models.BooleanField(default=False, help_text='Enable batch/lot number tracking for items', verbose_name='Batch Tracking')),
                ('holding_cost_per_unit', models.DecimalField(decimal_places=2, default=0.0, help_text='Annual storage cost per unit', max_digits=10, verbose_name='Holding Cost')),
                ('ordering_cost', models.DecimalField(decimal_places=2, default=0.0, help_text='Fixed cost per replenishment order', max_digits=10, verbose_name='Ordering Cost')),
                ('stockout_cost', models.DecimalField(decimal_places=2, default=0.0, help_text='Estimated cost per unit of stockout', max_digits=10, verbose_name='Stockout Cost')),
                ('expiration_policy', models.CharField(choices=[('0', 'Dispose of Stock'), ('1', 'Return to Manufacturer')], default='0', help_text='Procedure for expired inventory items', max_length=200, verbose_name='Expiration Handling')),
                ('recall_policy', models.CharField(choices=[('0', 'Remove from Stock'), ('1', 'Notify Customers'), ('3', 'Replace Item'), ('4', 'Destroy Item'), ('5', 'Repair Item')], default='0', help_text='Protocol for product recall scenarios', max_length=200, verbose_name='Recall Procedure')),
                ('near_expiry_policy', models.CharField(choices=[('DISCOUNT', 'Sell at Discount'), ('DONATE', 'Donate to Charity'), ('DESTROY', 'Destroy Immediately'), ('RETURN', 'Return to Supplier')], default='DISCOUNT', help_text='Action plan for items nearing expiration', max_length=20, verbose_name='Near-Expiry Action')),
                ('forecast_method', models.CharField(choices=[('SA', 'Simple Average'), ('MA', 'Moving Average'), ('ES', 'Exponential Smoothing')], default='SA', help_text='Algorithm for demand prediction', max_length=2, verbose_name='Forecast Method')),
                ('supplier_reliability_score', models.DecimalField(decimal_places=2, default=100.0, help_text='Performance rating (0-100 scale)', max_digits=5, verbose_name='Supplier Score')),
                ('alert_threshold', models.IntegerField(default=10, help_text='Percentage variance to trigger stock alerts', verbose_name='Alert Threshold')),
                ('external_system_id', models.CharField(blank=True, help_text='Identifier in external ERP/WMS systems', max_length=200, null=True, verbose_name='External ID')),
                ('auto_archive_days', models.PositiveIntegerField(default=365, help_text='Days of inactivity before archiving inventory', verbose_name='Auto-Archive Period')),
                ('assembly', models.BooleanField(default=False, help_text='Can this Inventory be built from other Inventory?', verbose_name='Assembly')),
                ('component', models.BooleanField(default=False, help_text='Can this Inventory be used to build other Inventory?', verbose_name='Component')),
                ('trackable', models.BooleanField(default=True, help_text='Does this Inventory have tracking for unique items?', verbose_name='Trackable')),
                ('testable', models.BooleanField(default=False, help_text='Can this Inventory have test results recorded against it?', verbose_name='Testable')),
                ('purchaseable', models.BooleanField(default=True, help_text='Can this Inventory be purchased from external suppliers?', verbose_name='Purchaseable')),
                ('salable', models.BooleanField(default=True, help_text='Can this Inventory be sold to customers?', verbose_name='Salable')),
                ('active', models.BooleanField(default=True, help_text='Is this Inventory active?', verbose_name='Active')),
                ('locked', models.BooleanField(default=False, help_text='Locked Inventory cannot be edited', verbose_name='Locked')),
                ('virtual', models.BooleanField(default=False, help_text='Is this a virtual inventory, such as a software product or license?', verbose_name='Virtual')),
                ('name', models.CharField(help_text='Unique identifier for this inventory system', max_length=255, verbose_name='Inventory Name')),
                ('description', models.TextField(blank=True, help_text='Detailed operational context and usage notes', null=True, verbose_name='Description')),
                ('inventory_type', models.CharField(choices=[('raw_material', 'Raw Material'), ('finished_good', 'Finished Good'), ('work_in_progress', 'Work In Progress'), ('maintenance_spare_part', 'Maintenance Spare Part'), ('consumable', 'Consumable'), ('tooling', 'Tooling'), ('packaging', 'Packaging')], default='raw_material', help_text='Type of inventory item', max_length=50, verbose_name='Inventory Type')),
                ('IPN', models.CharField(blank=True, help_text='Internal Part Number', max_length=100, null=True, verbose_name='IPN')),
                ('sync_status', models.CharField(choices=[('SYNCED', 'Synced'), ('PENDING', 'Pending Sync'), ('ERROR', 'Sync Error')], default='PENDING', max_length=20)),
                ('last_sync_timestamp', models.DateTimeField(blank=True, null=True)),
                ('sync_error_message', models.TextField(blank=True, null=True)),
                ('external_references', models.JSONField(default=dict, help_text='References to this inventory in external systems')),
                ('officer_in_charge', models.CharField(blank=True, help_text='ID of the officer responsible for this inventory', max_length=400, null=True, verbose_name='Officer in Charge ID')),
                ('default_supplier', models.ForeignKey(blank=True, help_text='Default supplier For the Inventory', limit_choices_to={'is_supplier': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_inventories', to='company.company', verbose_name='Default Supplier')),
            ],
            options={
                'verbose_name_plural': 'Inventories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InventoryBatch',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the model instance.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(blank=True, help_text='User who created this model instance.', max_length=400, null=True, verbose_name='Created By')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this model instance was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this model instance was last updated.', verbose_name='Updated At')),
                ('batch_number', models.CharField(max_length=100, verbose_name='Batch/Lot Number')),
                ('manufacture_date', models.DateField(verbose_name='Manufacture Date')),
                ('expiry_date', models.DateField(verbose_name='Expiry Date')),
                ('quantity_received', models.DecimalField(decimal_places=5, max_digits=15, verbose_name='Quantity Received')),
                ('remaining_quantity', models.DecimalField(decimal_places=5, max_digits=15, verbose_name='Remaining Quantity')),
                ('inventory', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batches', to='inventory.inventory')),
            ],
            options={
                'verbose_name_plural': 'Inventory Batches',
            },
        ),
    ]

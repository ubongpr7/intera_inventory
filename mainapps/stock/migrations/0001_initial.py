# Generated by Django 5.2.2 on 2025-06-29 08:02

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('inventory', '0001_initial'),
        ('orders', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='StockLocationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Brief name for the stock location type (unique)', max_length=100, unique=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, help_text='Longer form description of the stock location type (optional)', max_length=250, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Stock Location Type',
                'verbose_name_plural': 'Stock Location Types',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='StockLocation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the model instance.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this model instance was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this model instance was last updated.', verbose_name='Updated At')),
                ('profile', models.CharField(blank=True, editable=False, help_text='Profile of the user or entity associated with this model.', max_length=400, verbose_name='Profile')),
                ('created_by', models.CharField(blank=True, editable=False, help_text='User  ID of the creator', max_length=255, null=True, verbose_name='Created By')),
                ('code', models.CharField(blank=True, editable=False, help_text='Unique location identifier (auto-generated)', max_length=100, null=True, unique=True, verbose_name='Location Code')),
                ('name', models.CharField(max_length=200, null=True)),
                ('official', models.CharField(blank=True, help_text='ID of the manager for this stock location', max_length=255, null=True, verbose_name='Manager ID')),
                ('structural', models.BooleanField(default=False, help_text='Stock items may not be directly located into a structural stock location, but may be located to child locations.', verbose_name='Structural')),
                ('external', models.BooleanField(default=False, help_text='This is an external stock location', verbose_name='External')),
                ('description', models.TextField(blank=True, help_text='Longer form description of the stock location (optional)', null=True, verbose_name='Description')),
                ('physical_address', models.CharField(blank=True, max_length=255, null=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='The location this falls under eg if this is a sub location in a bigger location like warehouse', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='stock.stocklocation', verbose_name='Super Location')),
                ('location_type', models.ForeignKey(blank=True, help_text='Stock location type of this location', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_locations', to='stock.stocklocationtype', verbose_name='Location type')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StockItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the model instance.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(blank=True, help_text='User who created this model instance.', max_length=400, null=True, verbose_name='Created By')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this model instance was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this model instance was last updated.', verbose_name='Updated At')),
                ('name', models.CharField(help_text='Name of the stock item', max_length=200, null=True, verbose_name='Name')),
                ('packaging', models.CharField(blank=True, help_text='Description of how the StockItem is packaged (e.g. "reel", "loose", "tape" etc)', max_length=100, null=True, verbose_name='Packaging')),
                ('customer', models.CharField(blank=True, help_text='Customer ID', max_length=255, null=True, verbose_name='Customer ID')),
                ('serial', models.CharField(blank=True, help_text='Unique serial number for this StockItem', max_length=100, null=True, verbose_name='Serial Number')),
                ('sku', models.CharField(blank=True, help_text='Stock keeping unit for this stock item', max_length=100, null=True, verbose_name='Stock keeping unit')),
                ('serial_int', models.IntegerField(default=0)),
                ('link', models.URLField(blank=True, help_text='Optional URL to link to an external resource', null=True, verbose_name='External Link')),
                ('batch', models.CharField(blank=True, help_text='Batch code for this stock item', max_length=100, null=True, verbose_name='Batch Code')),
                ('quantity', models.DecimalField(decimal_places=5, default=1, max_digits=15, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Stock Quantity')),
                ('expiry_date', models.DateField(blank=True, help_text='Expiry date for stock item. Stock will be considered expired after this date', null=True, verbose_name='Expiry Date')),
                ('stocktake_date', models.DateField(blank=True, null=True)),
                ('stocktaker', models.CharField(blank=True, help_text='User  ID that performed the most recent stocktake', max_length=255, null=True)),
                ('review_needed', models.BooleanField(default=False)),
                ('delete_on_deplete', models.BooleanField(default=False, help_text='Delete this Stock Item when stock is depleted', verbose_name='Delete on deplete')),
                ('status', models.CharField(choices=[('ok', 'OK'), ('attention_needed', 'Attention needed'), ('damaged', 'Damaged'), ('destroyed', 'Destroyed'), ('rejected', 'Rejected'), ('lost', 'Lost'), ('quarantined', 'Quarantined'), ('returned', 'Returned')], default='ok', help_text='Status of this StockItem ', max_length=50, verbose_name='Status')),
                ('purchase_price', models.DecimalField(blank=True, decimal_places=7, help_text='Single unit purchase price at the time of purchase', max_digits=30, null=True, verbose_name='Purchase Price')),
                ('override_sales_price', models.DecimalField(blank=True, decimal_places=2, help_text='Temporary price override for this stock batch', max_digits=10, null=True)),
                ('notes', models.TextField(blank=True, help_text='Extra notes field', null=True, verbose_name='Notes')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('belongs_to', models.ForeignKey(blank=True, help_text='Is this item installed in another item?', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='installed_parts', to='stock.stockitem', verbose_name='Installed In')),
                ('inventory', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='stock_items', to='inventory.inventory')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, help_text='Link to another StockItem from which this StockItem was created', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='children', to='stock.stockitem', verbose_name='Parent Stock Item')),
                ('purchase_order', models.ForeignKey(blank=True, help_text='Link to a PurchaseOrder (if this stock item was created from a PurchaseOrder)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_items', to='orders.purchaseorder', verbose_name='Source Purchase Order')),
                ('sales_order', models.ForeignKey(blank=True, help_text='Link item to a SalesOrder', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stock_items', to='orders.salesorder', verbose_name='Destination Sales Order')),
                ('location', mptt.fields.TreeForeignKey(blank=True, help_text='Where this StockItem is located', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='stock_items', to='stock.stocklocation', verbose_name='Stock Location')),
            ],
            options={
                'verbose_name': 'Stock Item',
                'verbose_name_plural': 'Stock Items',
                'ordering': ['name', 'serial'],
            },
        ),
        migrations.CreateModel(
            name='StockMovement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the model instance.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(blank=True, help_text='User who created this model instance.', max_length=400, null=True, verbose_name='Created By')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this model instance was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this model instance was last updated.', verbose_name='Updated At')),
                ('movement_type', models.CharField(choices=[('IN', 'Stock In'), ('OUT', 'Stock Out'), ('TRANSFER', 'Location Transfer'), ('ADJUSTMENT', 'Inventory Adjustment'), ('RETURN', 'Return'), ('DAMAGE', 'Damage/Loss')], max_length=20)),
                ('quantity_before', models.DecimalField(decimal_places=5, max_digits=15)),
                ('quantity_after', models.DecimalField(decimal_places=5, max_digits=15)),
                ('quantity_changed', models.DecimalField(decimal_places=5, max_digits=15)),
                ('reference_order', models.CharField(blank=True, max_length=100)),
                ('user_id', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('from_location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='movements_from', to='stock.stocklocation')),
                ('inventory', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.inventory')),
                ('stock_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='stock.stockitem')),
                ('to_location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='movements_to', to='stock.stocklocation')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='StockPricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('selling_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('discount_flat', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('discount_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('tax_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('price_effective_from', models.DateTimeField(default=django.utils.timezone.now)),
                ('price_effective_to', models.DateTimeField(blank=True, null=True)),
                ('stock_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricings', to='stock.stockitem')),
            ],
        ),
        migrations.CreateModel(
            name='StockItemTracking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the model instance.', primary_key=True, serialize=False, verbose_name='ID')),
                ('created_by', models.CharField(blank=True, help_text='User who created this model instance.', max_length=400, null=True, verbose_name='Created By')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when this model instance was created.', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when this model instance was last updated.', verbose_name='Updated At')),
                ('tracking_type', models.IntegerField(choices=[(10, 'Items received from supplier'), (11, 'Received against purchase order'), (12, 'Items returned from customer'), (20, 'Items shipped to customer'), (21, 'Shipped against sales order'), (22, 'Used in manufacturing process'), (30, 'Manual quantity adjustment'), (31, 'Moved between locations'), (32, 'Split from parent stock'), (33, 'Merged with parent stock'), (40, 'Placed in quarantine'), (41, 'Quality inspection performed'), (42, 'Rejected during inspection'), (50, 'Manual stock count performed'), (51, 'Automatic restock triggered'), (52, 'Near expiry date notification'), (60, 'Stock status updated'), (61, 'Damage reported on item'), (0, 'Other Uncategorized tracking event')], default=0)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('notes', models.CharField(blank=True, help_text='Entry notes', max_length=512, null=True, verbose_name='Notes')),
                ('user', models.CharField(blank=True, help_text='User  ID associated with this tracking info', max_length=255, null=True)),
                ('deltas', models.JSONField(blank=True, null=True)),
                ('inventory', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='inventory.inventory')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracking_info', to='stock.stockitem')),
            ],
            options={
                'indexes': [models.Index(fields=['date', 'item'], name='stock_stock_date_0f3229_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('tracking_type__in', [10, 11, 12, 20, 21, 22, 30, 31, 32, 33, 40, 41, 42, 50, 51, 52, 60, 61, 0])), name='valid_tracking_type')],
            },
        ),
        migrations.AddIndex(
            model_name='stockitem',
            index=models.Index(fields=['location'], name='stock_stock_locatio_202e5a_idx'),
        ),
        migrations.AddIndex(
            model_name='stockitem',
            index=models.Index(fields=['batch', 'serial'], name='stock_stock_batch_14da60_idx'),
        ),
        migrations.AddIndex(
            model_name='stockmovement',
            index=models.Index(fields=['stock_item', 'timestamp'], name='stock_stock_stock_i_762767_idx'),
        ),
        migrations.AddIndex(
            model_name='stockmovement',
            index=models.Index(fields=['movement_type', 'timestamp'], name='stock_stock_movemen_739dac_idx'),
        ),
    ]
